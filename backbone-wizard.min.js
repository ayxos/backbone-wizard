/*!
 * Backbone-wizard v1.4.0 (http://http://ayxos.com/backbone-wizard/)
 * Copyright 2014 Marco Antonio Pajares Silva.
 * Licensed under MIT
 */
define(function(a){"use strict";a("d3");var b=a("backbone"),c='<header><div id="progress_indicator"></div><h2 id="step_title"></h2><p id="step_instructions"></p></header><div class="current_step_container"></div><footer><div id="buttons"><button id="prev_step_button" class="btn btn-info">Prev:</button><button id="next_step_button" class="btn btn-info">Next:</button></div></footer>',d='<header><div id="progress_indicator"></div><h2 id="step_title"></h2><p id="step_instructions"></p></header><div class="current_step_container"></div><footer><div id="buttons"><button id="prev_step_button" class="btn btn-info">Prev:</button><button id="next_step_button" class="btn btn-info">Next:</button></div><button id="showTree" class="btn btn">Tree</button><div class="tree" id="tree"></div></footer>',e=b.View.extend({id:"wizard",events:{"click #next_step_button":"nextStep","click #prev_step_button":"prevStep","click #progress_indicator > label":"goToStep","click #showTree":"showTree"},initialize:function(a){_.bindAll(this,"render"),console.log("arg",a),this.steps=a.steps,this.currentStep=0,this.tree=a.tree,console.log("tree",this.tree),this.template=this.tree===!0?d:c},render:function(){return $(this.el).html(_.template(this.template)),this.progressIndicator=this.$("#progress_indicator"),this.title=this.$("h2#step_title"),this.instructions=this.$("p#step_instructions"),this.currentStepContainer=this.$(".current_step_container"),this.nextStepButton=this.$("#next_step_button"),this.prevStepButton=this.$("#prev_step_button"),this.renderCurrentStep(),this},renderProgressIndicator:function(){this.progressIndicator.empty(),_.each(this.steps,_.bind(function(a){if(a.step_number<=this.currentStep){var b='<label data-step="'+a.step_number+'"><title>'+a.title+"</title><span>"+a.step_number+"</span></label>";this.progressIndicator.append(b)}},this))},addStep:function(a){console.log("adding step WIV",a),console.log("steps",this.steps);for(var b=this.currentStep+1;b<this.steps.length;b++){var c=this.steps[b];c.step_number=this.steps[b].step_number+1}this.steps.splice(this.currentStep+1,0,a),this.renderCurrentStep()},renderCurrentStep:function(){var a,b=this.steps[this.currentStep];this.isFirstStep()?this.tree===!0&&(window.jsonTree=[{name:this.steps[this.currentStep].title,parent:"null"}]):a=this.steps[this.currentStep-1];var c=this.steps[this.currentStep+1];this.title.html(b.title),this.instructions.html(b.instructions),this.currentView=b.view,this.currentStepContainer.html(this.currentView.render().el),this.renderProgressIndicator(),a?this.prevStepButton.html("Prev: "+a.title).show():this.prevStepButton.hide(),this.nextStepButton.html(c?"Next: "+c.title:"Finish")},goToStep:function(a){var b=$(a.currentTarget).attr("data-step");console.log("click stepProgress",b),this.renderStep(b)},renderStep:function(a){var b,c=this.steps[a];this.isFirstStep()||(b=this.steps[this.currentStep-1]);var d=this.steps[this.currentStep+1];this.title.html(c.title),this.instructions.html(c.instructions),this.currentView=c.view,this.currentStepContainer.html(this.currentView.render().el),this.renderProgressIndicator(),b?this.prevStepButton.html("Prev: "+b.title).show():this.prevStepButton.hide(),this.nextStepButton.html(d?"Next: "+d.title:"Finish")},showTree:function(){$(".tree").toggle()},nextStep:function(){this.isLastStep()?this.save():(this.currentStep+=1,window.jsonTree&&this.tree===!0&&(console.log("tree found"),window.jsonTree.push({name:this.steps[this.currentStep].title,parent:this.steps[this.currentStep-1].title}),this.update()),this.renderCurrentStep())},prevStep:function(){this.isFirstStep()||(this.currentStep-=1,this.renderCurrentStep())},isFirstStep:function(){return 0===this.currentStep},isLastStep:function(){return this.currentStep==this.steps.length-1},save:function(){console.log("sending form")},createTree:function(){console.log("jsontree create",window.jsonTree);// *********** Convert flat data into a nice tree ***************
// create a name: node map
// ************** Generate the tree diagram  *****************
var a={top:20,right:120,bottom:20,left:120},b=960-a.right-a.left,c=500-a.top-a.bottom;window.i=0,window.tree=d3.layout.tree().size([c,b]),window.diagonal=d3.svg.diagonal().projection(function(a){return[a.y,a.x]}),window.svg=d3.select(".tree").append("svg").attr("width",b+a.right+a.left).attr("height",c+a.top+a.bottom).append("g").attr("transform","translate("+a.left+","+a.top+")"),this.update()},update:function(){// create the tree array
var a=[];console.log("jsonTree update",window.jsonTree);var b=window.jsonTree;window.dataMap=b.reduce(function(a,b){return a[b.name]=b,a},{}),b.forEach(function(b){// add to parent
var c=window.dataMap[b.parent];c?// create child array if it doesn't exist
(c.children||(c.children=[])).push(b):// parent is null or missing
a.push(b)});// Compute the new tree layout.
var c=window.tree.nodes(a[0]).reverse(),d=window.tree.links(c);// Normalize for fixed-depth.
c.forEach(function(a){a.y=180*a.depth});// Declare the nodes…
var e=window.svg.selectAll("g.node").data(c,function(a){return a.id||(a.id=++window.i)}),f=e.enter().append("g").attr("class","node").attr("transform",function(a){return"translate("+a.y+","+a.x+")"});f.append("circle").attr("r",10).style("fill","#fff"),f.append("text").attr("x",function(a){return a.children||a._children?-13:13}).attr("dy",".35em").attr("text-anchor",function(a){return a.children||a._children?"end":"start"}).text(function(a){return a.name}).style("fill-opacity",1);// Declare the links…
var g=window.svg.selectAll("path.link").data(d,function(a){return a.target.id});// Enter the links.
g.enter().insert("path","g").attr("class","link").attr("d",window.diagonal),console.log("window.jsonTree end",window.jsonTree)}});return b.View.extend({initialize:function(a){_.bindAll(this,"render","wizardMethod"),this.steps=this.turnSteps(a.steps),this.tree=a.tree,this.render()},turnSteps:function(a){this.steps=[],console.log("number of slides",a.length);for(var b=0;b<a.length;b++)this.steps.push({step_number:b,title:a[b].title,instructions:a[b].intro,view:new a[b].view});return this.steps},render:function(){return this.wizardMethod(),this.tree===!0&&(console.log("tree set to true"),this.onRenderComplete()),this},onRenderComplete:function(){// check every 200ms to see if this.el has been injected into the DOM 
if(!$.contains(document.documentElement,this.el)){var a=this;return void setTimeout(function(){a.onRenderComplete()},200)}this.wizard.createTree()},addStep:function(a){console.log("adding step WBV"),this.wizard.addStep({step_number:window.wizard.wizard.currentStep+1,title:a.title,instructions:a.intro,view:new a.view})},wizardMethod:function(){var a=this.steps;this.wizard=new e({steps:a,tree:this.tree}),console.log("view",this.wizard),$(this.el).html(this.wizard.render().el)}})});